name: build

on:
  repository_dispatch:
    types: [latest-uuu-version]
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: prepare
        run: |
          DOCKER_USERNAME=allenorro
          DOCKER_IMAGE=allenorro/uuu
          DOCKER_PLATFORMS=linux/amd64,linux/arm/v7,linux/arm64/v8
          VERSION=latest
          RELEASE_NAME=''
          if [ github.event.client_payload != '' ]; then
            VERSION=${{ github.event.client_payload.tag_name }}
            RELEASE_NAME=${{ github.event.client_payload.name }}
          fi
          echo ::set-output name=docker_username::${DOCKER_USERNAME}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=release_name::${RELEASE_NAME}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            --tag ${DOCKER_IMAGE}:${VERSION} \
            --file Dockerfile .

      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3.2.0

      - name: Checkout
        uses: actions/checkout@v2.3.1

      - name: Docker Buildx (build)
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}

      - name: Docker Login
        if: success() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin

      - name: Docker Buildx (push)
        if: success() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}

      - name: Docker Check Manifest
        if: success() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        run: |
          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}

      - name: Create GitHub Release
          if: success() && github.event_name == 'repository_dispatch' && github.event.action == 'latest-uuu-version' && RELEASE_NAME != '' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ steps.prepare.outputs.version }}
            release_name: ${{ steps.prepare.outputs.release_name }}
            draft: false
            prerelease: false

      - name: Clear
        if: always() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
        run: |
          rm -f ${HOME}/.docker/config.json